import unittest
#from unittest.mock import MagicMock
import main
from third_party import rsa


class TestMain(unittest.TestCase):
    
    def setUp(self):
        self.settings = {"ssid": "1645", "password": "Lollipop@1", "atSign": "77passingamateur", "privateKey": [19706910369570357136975790607516692122024305945600454411376186473364141625972705454774726875548822968119564156053397242779087570164960539812362015940884891469298399982968227492499431829842218131477697187668411880836170186824072083455684539014396120624106851447967987581610695738913661559147673757956183086337158110336335092803289158689776564833537885672200934814024911747067520944480346271388813068921437122439278641223016606649332460793744262937393532962631885400389754436009107105562491100199722392880362984468952747886540829208690283398421254359053914544863489699945346714214572545940055790749727172733355740515169,
					65537,
					17681401904895045089206302752835635037721458319838447286926944181459097788254284655175072325696115771982216029725129488268506770423880322588868866431786204789450466414369207391038025711072405943955629222150697880663558648632715299438144965112615870253720905320535966519466721396216827339357040521256412738753599331324749272883790253673175244213227739080331228407430044426634313125046926540196781169497447682799633317356159500340854465864189428378453897588824342403849716356244673678644230985978906930243923746048752420132522076477511606568272115470078187159723375911827166956605108894486105934766147485657250458708673,
					155418282390351168443689255898471433000756797225008446734537659350648793653802004968607929945719190664190253226286589456052163534987266253278854958581675570395239645770931272701291611996908494166040225470079222369131967127168292987295033601826896341871125727541975254610024785133252504610895710551408754500969,
					126799177461465891491413295736123365974683744660664447633517544659220422519195332475604749435502139736865080237157472953580647093940368265571913658566613834669624723075930652042727589287835862840850699938702995114437835634579282639747338908916374644433991034299988169608986093183192724298573511338947320831801]}
        self.key = {"aesEncryptPrivateKey": "aes_priv_key", "aesEncryptPublicKey": "aes_pub_key", "aesPkamPrivateKey": "aes_pkam_priv_key", "aesPkamPublicKey": "aes_pkam_pub_key", "selfEncryptionKey": "self_enc_key"}
        self.secondary = "77passingamateur"
        self.verb = "test_verb"
        self.response = "@response\r\n@command"
        
        
    def test_read_settings(self):
        ssid, password, atSign, privateKey = main.read_settings()
        self.assertEqual(atSign, "77passingamateur")
        self.assertEqual(privateKey, [19706910369570357136975790607516692122024305945600454411376186473364141625972705454774726875548822968119564156053397242779087570164960539812362015940884891469298399982968227492499431829842218131477697187668411880836170186824072083455684539014396120624106851447967987581610695738913661559147673757956183086337158110336335092803289158689776564833537885672200934814024911747067520944480346271388813068921437122439278641223016606649332460793744262937393532962631885400389754436009107105562491100199722392880362984468952747886540829208690283398421254359053914544863489699945346714214572545940055790749727172733355740515169,
					65537,
					17681401904895045089206302752835635037721458319838447286926944181459097788254284655175072325696115771982216029725129488268506770423880322588868866431786204789450466414369207391038025711072405943955629222150697880663558648632715299438144965112615870253720905320535966519466721396216827339357040521256412738753599331324749272883790253673175244213227739080331228407430044426634313125046926540196781169497447682799633317356159500340854465864189428378453897588824342403849716356244673678644230985978906930243923746048752420132522076477511606568272115470078187159723375911827166956605108894486105934766147485657250458708673,
					155418282390351168443689255898471433000756797225008446734537659350648793653802004968607929945719190664190253226286589456052163534987266253278854958581675570395239645770931272701291611996908494166040225470079222369131967127168292987295033601826896341871125727541975254610024785133252504610895710551408754500969,
					126799177461465891491413295736123365974683744660664447633517544659220422519195332475604749435502139736865080237157472953580647093940368265571913658566613834669624723075930652042727589287835862840850699938702995114437835634579282639747338908916374644433991034299988169608986093183192724298573511338947320831801])

        
    def test_read_key(self):
        aesEncryptPrivateKey, aesEncryptPublicKey, aesPkamPrivateKey, aesPkamPublicKey, selfEncryptionKey = main.read_key("77passingamateur")

        self.assertEqual(aesEncryptPrivateKey, "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")
        self.assertEqual(aesEncryptPublicKey, "vgz4x8q9bu7pYq2IeOKtK0AATyNxj29YgbPaipfx3crgMEzoB12vOboGBAPgI9oK3muFGWO0Vd/xGBX0g40LFFdYqn+FkJOI8y0FLWjyRlGQZHeVF16A81GExS3djN2CTzsgjyyLbiCSABb1BvQfZDsoxP80sua4PyT77oKUmJ0lz7xRFgsUbsJpxVgdZSMK9ZDu2znryju6f9F59LP0SS99Cru8/zBmEs4coJsYLV6VMpgAJF8wBkTjf01mksBPqdPxx53eWL/c+QpWjtZPPY2B9xwV5WXGF0XAUI0Qfl0sxEvIYMaL+KosNve+p2GEwA8RCPR1Cucef9fDNLOyw3qdUybzcT4YIWwxrTpd2sIb+KhV7suYaduUtXtrypmsY56j0r31J/umBW30P6keThAUj5trWTD/GNy+yflvS3wRnGnMsde5IxKj3899L0wJrL3cBLWHPXe17nh3u/TYKq2y+fgTlrUNMxKwWOlJbjlOu7qadmUtY3JYKZlMc8FSWDEZnBMlk7DxTByzcPCe5g==")
        self.assertEqual(aesPkamPrivateKey, "vgz4wPWwZuLqQYe3Uu6vHREcFiYJqRpcgaPQj5fhtsjvMmLdI123EbowBAPKK8Mp8kKNCh26UIyKXW6e6ps+d24g5BLZ3LeRwA9UfnS2AViPQVS1PnyRuFaZ0lvD8+2QbhUo8Ez7YCakPDjKBsgNeB450aUTlebrIzDUiYHZpLA2zs5nF344CMgYx28GYhBIsfzvzgrmzBGhAK0xnOeLUxdQLKunrUAzRqAxxsk1AzCaLr8pAHwjHz/4XwN7t8RVmMeKk8DtK6eMjikMmflDOIyj7wU+3UbkEVrCLopxGWl/5gP/S/27la9KVIXYjHqB3m42IvNtXrRJLsbZJfOY0WqyWQPObwcBI2QN+RN2+fQb/Y02ib6QW4rJgGs0/ryXWay4wprMHfmODjrKPNAmVW42v6x3cHWtErSku8lbbzwJvjnM6v+jNB+csPhbD20lqZWvCNejTBKs9m5I9NL+DfW95sdgh60+DGnDC7BCckwqmu+hNGpdTV5IFrVJK8JBJCUUk2Yfppq4I1n5ObnTraFwyKnSFo/7JgrK6ArkLfB/sG7a2awDuYPPlbN9ZT7xdXqcWzKy5fKkMGzbTiZnj3nBYMMUUZFdUT3mJLO2KpMlgGvaMHtNZpcwAvBK6RSWAjSPt4OApvPZcE/sD3OCysqeoAgBeNgJJIwbpTOQxpGc85uWG3FP2bkJSk6aTgEO88651z/+x7bFQlwEhONb5a7AEfjgr5mwThhLxErXPph2iaaaRZyk8AbFfQq4v40JHVTQWS7o1xbUb4XHSFY/Urnj/nqhQu/j2Bpmz1zgUfU5FqPmtqMfMaBUQ0Ix+p5odn9noGUP/n554UkmKlhMP36fXIiDlULmQwdKifJJdg5/ucuj44WtKxqVOCnls/4kryYIbui+pClmt8S7ZApEIpirIo3N1/3GheZtItRa7QumKH/H7hskylM/AFwz9Vo4fR9VndFPX1rQBKfqHXZ0zwIc9Fhy0VeDu27Icfu3lu/PX47WKHnedDmSaL2OpwM+rvJVXYypc4vlrz6xJAbNUkt9Pzpj6xLHMD57ijnoPac3xJWixTsh1I7znk6rSGtpC9eSk7HmoxSFXQQuju7l3UEvVHeQJE/9yLVt5qMkQHIgwRwH7U3MHPbKWtg1FJKzp0StNl2a4IMqTMbuqtTyRuAwe1lJN3CW/RfKAoY2AJoaNuRxMAiTDoUCfkI2XdU3aGRJWvv2HryMaurPx/2nTi1u8vN5eI0otx5I3KLblH/udsGiwboURUx5oz2ETLBJcjYno3tj+gi+7z1ahuvqK9NRVTAEsMTENGAKTTLs0I0nVC0koIi+lmoFzwXDzGtpWTS21y1/su6wJxuvHdCIHyZVjU+AruUVsQQ4kPYi+RAPzf2hBg56Gk8Z8T/ki61UcSlUjXIIyJbHjoAOukPFjSb+n4vMMndmKXQB612qTlbNvdUr/OcAC2c0BDquVAD5uQ5QNrApi14tEm1b2QPZqHn/PglNlIQ3VFtDWRq9Ky1LO1cF0POLv/akBhhpQIU9rMp3R8a+NMkBiShIHtKW+JkE9QJ+Os7JtHJvWfjNixEjxASb2Zf4VA8MyTrLnQKzUTHqBek9IS0PWdtWe5/WcLz9DpmiULgZqFoD6/CDuhl+lGTiRbWZGBqCjcpVtqwYyYUS3d0YLd1Hl7yXSYwp8FykHXq+REHazyROOlTNun7yOQX3JFsYZ1IdLACyraNnOEBVa6tT24tvnjk147hD5T+e9aNeS2xwpEjpXC1NYfUsdAsc+dAjNnr1waBmyMTo+mvd/FFDc8iWZlhD0wLA5Vy90zHxeGfq9vZpaofYuam3sSbEseulp72zltUnfm8Ae38csOG98PA/OioiS+c1eeJ2oA4rHELpBS+Lo2mhlXzQhY3xXagDDe2kbNRj7gZZHwIXAe+cjuVYiMMrkTu433ruANzpQzx5tkn89yAZBwIKVtEsZZcjrFxeCzi7w2nEgsalBVp4RVJQSwtDHkFGEqJVfYhpbuC1voc231SFzYr74BNsRqZAd8NMo6K+2GuiqtWMxgKBL2KyPj2NtMs8lXo/aEpx8RP10/eg3xXyfn5JEVHI3yFPd0VhbzKhZMSt+047oKNZ6wKwtx0VIKbgAvZlSqQ2CgoqpjrKRqlmUYIvWH9lK9PlsALxd2H6R+/P")
        
        self.assertEqual(aesPkamPublicKey, "vgz4x8q9bu7pYq2IeOKtK0AATyNxj29YgbPaipfx3crgMEzoB12vOboGBAPlBvwK5HS9LC3TWIyiU1L0srggb1xQlTam/KCv7wkHSniGPm78SXeLGG6lsm2Y5mnRtO2WSjUejHmnHHauPDreV+wMbxgphfIXq+eSICTzoKzG1ZB0z8dxKScMH8Er6WsddSossMTqw3jB0FaRRKgH0rrZZh85KZimzk5LCoAmqs0KLVKGLL1oKHwTc0HhNBZ6t8JDoP/576C3NrGGpBsNis1LNqns2Q8eiRzvCmXfUo5hahxS5ULXSMir0JJLUI+AkE/4qll6T/ZAdPkATNPiA9C+qVqCUT6qZRUCJEAD9iZN4s4dpZsviKbITdCQsHQx0r7BXaa6+P2lAOmCYh7XAZkiWxEe06Z/PymWMO61r+h9bR1EhHHVtYK+BSub0MscAjpKmaGqNLarLm+X0g9OvOjOJa20jOdxqOMvGBvTeO5PQ0Yvq+OcRXMYVUZ4C6J/bs5/NhcZnBMlk7DxTByzcPCe5g==")
        
        self.assertEqual(selfEncryptionKey, "n1MES/VIvv+spuoKPyuHSevKfh8lA0VDFTCwa12m1p0=") 
        
        
    def test_send_and_receive_commands(self):
    # Set up input values
        atSign = "77passingamateur"

        private_key = [19706910369570357136975790607516692122024305945600454411376186473364141625972705454774726875548822968119564156053397242779087570164960539812362015940884891469298399982968227492499431829842218131477697187668411880836170186824072083455684539014396120624106851447967987581610695738913661559147673757956183086337158110336335092803289158689776564833537885672200934814024911747067520944480346271388813068921437122439278641223016606649332460793744262937393532962631885400389754436009107105562491100199722392880362984468952747886540829208690283398421254359053914544863489699945346714214572545940055790749727172733355740515169,
					65537,17681401904895045089206302752835635037721458319838447286926944181459097788254284655175072325696115771982216029725129488268506770423880322588868866431786204789450466414369207391038025711072405943955629222150697880663558648632715299438144965112615870253720905320535966519466721396216827339357040521256412738753599331324749272883790253673175244213227739080331228407430044426634313125046926540196781169497447682799633317356159500340854465864189428378453897588824342403849716356244673678644230985978906930243923746048752420132522076477511606568272115470078187159723375911827166956605108894486105934766147485657250458708673,
					155418282390351168443689255898471433000756797225008446734537659350648793653802004968607929945719190664190253226286589456052163534987266253278854958581675570395239645770931272701291611996908494166040225470079222369131967127168292987295033601826896341871125727541975254610024785133252504610895710551408754500969,
					126799177461465891491413295736123365974683744660664447633517544659220422519195332475604749435502139736865080237157472953580647093940368265571913658566613834669624723075930652042727589287835862840850699938702995114437835634579282639747338908916374644433991034299988169608986093183192724298573511338947320831801]

        secondary = main.find_secondary(atSign)
        print('')
        ss = main.connect_to_secondary(secondary)
        
    # Send and receive commands
        response, command = main.send_verb(ss, "from:" + atSign)
        assert "data:" in response
        
    def test_b42_urlsafe_encode(self):
        payload = b"\x9a\xbf\x04\x1e\x80\x04\x08\xdc"
        result = main.b42_urlsafe_encode(payload)
        self.assertEqual(result, "mr8EHoAECNw=")
        
if __name__ == '__main__':
    unittest.main()